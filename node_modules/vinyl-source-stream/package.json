{
  "_args": [
    [
      {
        "raw": "vinyl-source-stream",
        "scope": null,
        "escapedName": "vinyl-source-stream",
        "name": "vinyl-source-stream",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\work\\topo\\QTopo"
    ]
  ],
  "_cnpm_publish_time": 1425624103495,
  "_from": "vinyl-source-stream",
  "_hasShrinkwrap": false,
  "_id": "vinyl-source-stream@1.1.0",
  "_location": "/vinyl-source-stream",
  "_nodeVersion": "0.10.36",
  "_npmUser": {
    "name": "hughsk",
    "email": "hughskennedy@gmail.com"
  },
  "_npmVersion": "2.5.0",
  "_phantomChildren": {
    "clone-stats": "0.0.1",
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "0.0.1",
    "string_decoder": "0.10.31",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "vinyl-source-stream",
    "scope": null,
    "escapedName": "vinyl-source-stream",
    "name": "vinyl-source-stream",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://registry.npm.taobao.org/vinyl-source-stream/download/vinyl-source-stream-1.1.0.tgz",
  "_shasum": "44cbe5108205279deb0c5653c094a2887938b1ab",
  "_shrinkwrap": null,
  "_spec": "vinyl-source-stream",
  "_where": "E:\\work\\topo\\QTopo",
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughsk.io/"
  },
  "browser": "index.js",
  "bugs": {
    "url": "https://github.com/hughsk/vinyl-source-stream/issues"
  },
  "dependencies": {
    "through2": "^0.6.1",
    "vinyl": "^0.4.3"
  },
  "description": "Use conventional text streams at the start of your gulp or vinyl pipelines",
  "devDependencies": {
    "gulp": "~3.3.0",
    "gulp-rename": "~0.2.1",
    "tape": "~2.3.2",
    "vinyl-map": "0.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "44cbe5108205279deb0c5653c094a2887938b1ab",
    "size": 3303,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/vinyl-source-stream/download/vinyl-source-stream-1.1.0.tgz"
  },
  "gitHead": "916fbd27d622aba1a76854226b87908af3878e05",
  "homepage": "https://github.com/hughsk/vinyl-source-stream",
  "keywords": [
    "vinyl",
    "gulp",
    "gulpfriendly",
    "vanilla",
    "stream",
    "string",
    "text",
    "classic"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    }
  ],
  "name": "vinyl-source-stream",
  "optionalDependencies": {},
  "publish_time": 1425624103495,
  "readme": "# vinyl-source-stream [![Flattr this!](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=hughskennedy&url=http://github.com/hughsk/vinyl-source-stream&title=vinyl-source-stream&description=hughsk/vinyl-source-stream%20on%20GitHub&language=en_GB&tags=flattr,github,javascript&category=software)[![experimental](http://hughsk.github.io/stability-badges/dist/experimental.svg)](http://github.com/hughsk/stability-badges) #\n\nUse conventional text streams at the start of your\n[gulp](http://github.com/gulpjs/gulp) or\n[vinyl](http://github.com/wearefractal/vinyl) pipelines, making for nicer\ninteroperability with the existing npm stream ecosystem.\n\nTake, for example, [browserify](http://browserify.org/). There's the\n[gulp-browserify](https://github.com/deepak1556/gulp-browserify) and\n[gulpify](https://github.com/hughsk/gulpify) plugins, which you can use in\ncombination with gulp to get browserify working in your build. Unfortunately,\nthese plugins come with additional overhead: an extra GitHub repository, npm\nmodule, maintainer, tests, semantics, etc. It's much simpler\nin this case to use the original module directly where you can, which is what\n`vinyl-source-stream` handles for you.\n\n## Usage ##\n\n[![vinyl-source-stream](https://nodei.co/npm/vinyl-source-stream.png?mini=true)](https://nodei.co/npm/vinyl-source-stream)\n\nOur previous example, browserify, has a streaming API for its output bundles\nwhich you can use directly. This module is just a bridge that makes it\nsimple to use conventional text streams such as this in combination with gulp.\nHere's an example of using `vinyl-source-stream` and `browserify`, compared to\nusing `gulpify`:\n\n``` javascript\nvar source = require('vinyl-source-stream')\nvar streamify = require('gulp-streamify')\nvar browserify = require('browserify')\nvar uglify = require('gulp-uglify')\nvar gulpify = require('gulpify')\nvar rename = require('gulp-rename')\nvar gulp = require('gulp')\n\n// using gulpify:\ngulp.task('gulpify', function() {\n  gulp.src('index.js')\n    .pipe(gulpify())\n    .pipe(uglify())\n    .pipe(rename('bundle.js'))\n    .pipe(gulp.dest('./'))\n})\n\n// using vinyl-source-stream:\ngulp.task('browserify', function() {\n  var bundleStream = browserify('./index.js').bundle()\n\n  bundleStream\n    .pipe(source('index.js'))\n    .pipe(streamify(uglify()))\n    .pipe(rename('bundle.js'))\n    .pipe(gulp.dest('./'))\n})\n```\n\nNot all that different, really! The nice thing here is that you're getting the\nup-to-date browserify API and don't have to worry about the plugin's available\nfunctionality. Of course, these same benefits apply for any readable text\nstream you can find on npm.\n\n## API ##\n\n### `stream = sourceStream([filename])` ###\n\nCreates a through stream which takes text as input, and emits a single\nvinyl file instance for streams down the pipeline to consume.\n\n`filename` is a \"pretend\" filename to use for your file, which some streams\nmight use to determine various factors such as the final filename of your file.\nIt should be a string, and though recommended, using this argument is optional.\n\n## License ##\n\nMIT. See [LICENSE.md](http://github.com/hughsk/vinyl-source-stream/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/vinyl-source-stream.git"
  },
  "scripts": {
    "test": "node test"
  },
  "version": "1.1.0"
}
